#summary Over-arching goals that direct this project and set it apart from similar projects.
#labels Phase-Design

= Introduction =
Any good software project realizes the importance of architecture and goals, and LegendTV is no different. This page outlines the goals that LegendTV developers must all be committed to for the project to succeed.

This list is by no means comprehensive -- in addition to acknowledging the importance of goals and architecture, a project must also acknowledge the importance of adaptation to change. Thus, as time goes on, this page should grow to cover the goals that the development team feels are best suited for the project at a particular time.

= Architecture Goals =
These design goals are targeted at the underlying system architecture rather than what the user is likely to see. Regardless, these goals aim to keep LegendTV easy to maintain, which, in turn, allows us to make a positive user experience possible.

== 1. Embrace change ==
Source code is just as much of a creative expression as it's a formal specification, but that doesn't make it sacred. If a new requirement emerges that could be implemented either as a short term hack that affects only one or two modules or an elegant re-design of several modules, we should have the integrity to choose the latter. Otherwise, we may start with a good design, but end up with a mess of code at the end if we aren't willing to change that design when necessary.

*Rationale:* Requirements are dynamic, and if we are to meet them, we must realize that source code and design must also be dynamic.

== 2. Don't re-invent the wheel ==
PVR software is not something new -- several open and closed source projects compete with LegendTV. Yet this is a strength more than a weakness because we can learn what works and what doesn't from our competitors. And, from the open source projects, we can even borrow some of the code for the stuff that works, and avoid writing code that's similar to the stuff that doesn't.

In addition to competing projects, there are also projects that are strongly related to LegendTV; VLC, MPlayer, and Xine just to name a few. If we can borrow code from these projects, or better still, if we link against the libraries that many of these projects provide, we can avoid having to re-design, re-implement, and re-test the same code they already possess.

*Rationale:* The less code we have to write to get the job done, the less code we have to test, and the less code we have to maintain.

== 2. Delegate responsibility for external modules ==
In goal #1, we've established that we shouldn't re-invent the wheel, but does that mean that we can tweak the wheel to our needs? If necessary, yes, we should. In some cases, it would be better to round off the wheel and design our system properly than to compensate for a cube in the rest of our system. But, if the wheel is well-maintained, we should delegate the responsibility of changing it to those who know how it rolls best.

In other words, if we integrate VLC into our project, then we should be hesitant to modify the internal workings of VLC ourselves. If there's something that we don't like about the interface, we should consider wrapping it with something nicer in our code instead of modifying the interface directly. If we encounter a bug in VLC, we should inform the VLC project to fix it. This benefits us both -- we don't have to maintain custom patches and a custom build of VLC, and the VLC project produces a higher-quality product.

Thinking in a different way, this is similar to applying the OOP principle of encapsulation to the project. Each module that we borrow from other projects should be thought of a black box with an input and output. If we aren't happy with the way the black box, we shouldn't take it upon ourselves to try to understand how the black box works and to maintain our own black box. Instead, we need to ask the authors who see it as a white box to make it work the way we want, or we need to look for another black box that better suits our needs.

*Rationale:* We borrow code to reduce our maintenance responsibilities, but changes to that code make us responsible for it again. Thus, we should endeavor to change the code we borrow as little as possible.

= Usability Goals =

These design goals are targeted directly at the user experience. Although the underlying architecture is what's most important for us to maintain LegendTV, usability is what's most important for users to keep using it.

== 4. Simple means easy, not limited ==


